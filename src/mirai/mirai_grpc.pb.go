// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mirai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiraiAgentClient is the client API for MiraiAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiraiAgentClient interface {
	Subscribe(ctx context.Context, in *InitParam, opts ...grpc.CallOption) (MiraiAgent_SubscribeClient, error)
	About(ctx context.Context, in *SelfParam, opts ...grpc.CallOption) (*AboutResult, error)
	GetMessageFromId(ctx context.Context, in *GetMessageParam, opts ...grpc.CallOption) (*GetMessageResult, error)
	ListFriend(ctx context.Context, in *SelfParam, opts ...grpc.CallOption) (*ListFriendResult, error)
	ListGroup(ctx context.Context, in *SelfParam, opts ...grpc.CallOption) (*ListGroupResult, error)
	ListMember(ctx context.Context, in *ListMemberParam, opts ...grpc.CallOption) (*ListMemberResult, error)
	GetBotProfile(ctx context.Context, in *SelfParam, opts ...grpc.CallOption) (*GetProfileResult, error)
	GetFriendProfile(ctx context.Context, in *GetFriendParam, opts ...grpc.CallOption) (*GetProfileResult, error)
	GetMemberProfile(ctx context.Context, in *GetMemberParam, opts ...grpc.CallOption) (*GetProfileResult, error)
	SendFriendMessage(ctx context.Context, in *SendFriendMessageParam, opts ...grpc.CallOption) (*UniversalSendMessageResult, error)
	SendGroupMessage(ctx context.Context, in *SendGroupMessageParam, opts ...grpc.CallOption) (*UniversalSendMessageResult, error)
	SendTempMessage(ctx context.Context, in *SendTempMessageParam, opts ...grpc.CallOption) (*UniversalSendMessageResult, error)
	SendNudge(ctx context.Context, in *SendNudgeParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	Recall(ctx context.Context, in *RecallParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	ListFile(ctx context.Context, in *ListFileParam, opts ...grpc.CallOption) (*ListFileResult, error)
	GetFileInfo(ctx context.Context, in *GetFileInfoParam, opts ...grpc.CallOption) (*GetFileInfoResult, error)
	FileMkdir(ctx context.Context, in *FileMkdirParam, opts ...grpc.CallOption) (*FileMkdirResult, error)
	FileDelete(ctx context.Context, in *FileDeleteParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	FileMove(ctx context.Context, in *FileMoveParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	FileRename(ctx context.Context, in *FileRenameParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	Mute(ctx context.Context, in *MuteParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	Unmute(ctx context.Context, in *UnmuteParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	Kick(ctx context.Context, in *KickParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	Quit(ctx context.Context, in *QuitParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	MuteAll(ctx context.Context, in *MuteAllParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	UnmuteAll(ctx context.Context, in *UnmuteAllParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	SetEssence(ctx context.Context, in *SetEssenceParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	GetGroupConfig(ctx context.Context, in *GetGroupConfigParam, opts ...grpc.CallOption) (*GetGroupConfigResult, error)
	UpdateGroupConfig(ctx context.Context, in *UpdateGroupConfigParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	GetMemberInfo(ctx context.Context, in *GetMemberInfoParam, opts ...grpc.CallOption) (*GetMemberInfoResult, error)
	UpdateMemberInfo(ctx context.Context, in *UpdateMemberInfoParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	SetMemberAdmin(ctx context.Context, in *SetMemberAdminParam, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	SendNewFriendRequestEventResponse(ctx context.Context, in *NewFriendRequestEventResponse, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	SendMemberJoinRequestEventResponse(ctx context.Context, in *MemberJoinRequestEventResponse, opts ...grpc.CallOption) (*UniversalResponseResult, error)
	SendBotInvitedJoinGroupRequestEventResponse(ctx context.Context, in *BotInvitedJoinGroupRequestEventResponse, opts ...grpc.CallOption) (*UniversalResponseResult, error)
}

type miraiAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewMiraiAgentClient(cc grpc.ClientConnInterface) MiraiAgentClient {
	return &miraiAgentClient{cc}
}

func (c *miraiAgentClient) Subscribe(ctx context.Context, in *InitParam, opts ...grpc.CallOption) (MiraiAgent_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MiraiAgent_ServiceDesc.Streams[0], "/mirai.MiraiAgent/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &miraiAgentSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MiraiAgent_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type miraiAgentSubscribeClient struct {
	grpc.ClientStream
}

func (x *miraiAgentSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *miraiAgentClient) About(ctx context.Context, in *SelfParam, opts ...grpc.CallOption) (*AboutResult, error) {
	out := new(AboutResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/About", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) GetMessageFromId(ctx context.Context, in *GetMessageParam, opts ...grpc.CallOption) (*GetMessageResult, error) {
	out := new(GetMessageResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/GetMessageFromId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) ListFriend(ctx context.Context, in *SelfParam, opts ...grpc.CallOption) (*ListFriendResult, error) {
	out := new(ListFriendResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/ListFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) ListGroup(ctx context.Context, in *SelfParam, opts ...grpc.CallOption) (*ListGroupResult, error) {
	out := new(ListGroupResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/ListGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) ListMember(ctx context.Context, in *ListMemberParam, opts ...grpc.CallOption) (*ListMemberResult, error) {
	out := new(ListMemberResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/ListMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) GetBotProfile(ctx context.Context, in *SelfParam, opts ...grpc.CallOption) (*GetProfileResult, error) {
	out := new(GetProfileResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/GetBotProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) GetFriendProfile(ctx context.Context, in *GetFriendParam, opts ...grpc.CallOption) (*GetProfileResult, error) {
	out := new(GetProfileResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/GetFriendProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) GetMemberProfile(ctx context.Context, in *GetMemberParam, opts ...grpc.CallOption) (*GetProfileResult, error) {
	out := new(GetProfileResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/GetMemberProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) SendFriendMessage(ctx context.Context, in *SendFriendMessageParam, opts ...grpc.CallOption) (*UniversalSendMessageResult, error) {
	out := new(UniversalSendMessageResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/SendFriendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) SendGroupMessage(ctx context.Context, in *SendGroupMessageParam, opts ...grpc.CallOption) (*UniversalSendMessageResult, error) {
	out := new(UniversalSendMessageResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/SendGroupMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) SendTempMessage(ctx context.Context, in *SendTempMessageParam, opts ...grpc.CallOption) (*UniversalSendMessageResult, error) {
	out := new(UniversalSendMessageResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/SendTempMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) SendNudge(ctx context.Context, in *SendNudgeParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/SendNudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) Recall(ctx context.Context, in *RecallParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/Recall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) ListFile(ctx context.Context, in *ListFileParam, opts ...grpc.CallOption) (*ListFileResult, error) {
	out := new(ListFileResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/ListFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) GetFileInfo(ctx context.Context, in *GetFileInfoParam, opts ...grpc.CallOption) (*GetFileInfoResult, error) {
	out := new(GetFileInfoResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/GetFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) FileMkdir(ctx context.Context, in *FileMkdirParam, opts ...grpc.CallOption) (*FileMkdirResult, error) {
	out := new(FileMkdirResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/FileMkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) FileDelete(ctx context.Context, in *FileDeleteParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/FileDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) FileMove(ctx context.Context, in *FileMoveParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/FileMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) FileRename(ctx context.Context, in *FileRenameParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/FileRename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) DeleteFriend(ctx context.Context, in *DeleteFriendParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) Mute(ctx context.Context, in *MuteParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/Mute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) Unmute(ctx context.Context, in *UnmuteParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/Unmute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) Kick(ctx context.Context, in *KickParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/Kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) Quit(ctx context.Context, in *QuitParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) MuteAll(ctx context.Context, in *MuteAllParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/MuteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) UnmuteAll(ctx context.Context, in *UnmuteAllParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/UnmuteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) SetEssence(ctx context.Context, in *SetEssenceParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/SetEssence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) GetGroupConfig(ctx context.Context, in *GetGroupConfigParam, opts ...grpc.CallOption) (*GetGroupConfigResult, error) {
	out := new(GetGroupConfigResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/GetGroupConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) UpdateGroupConfig(ctx context.Context, in *UpdateGroupConfigParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/UpdateGroupConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) GetMemberInfo(ctx context.Context, in *GetMemberInfoParam, opts ...grpc.CallOption) (*GetMemberInfoResult, error) {
	out := new(GetMemberInfoResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/GetMemberInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) UpdateMemberInfo(ctx context.Context, in *UpdateMemberInfoParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/UpdateMemberInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) SetMemberAdmin(ctx context.Context, in *SetMemberAdminParam, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/SetMemberAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) SendNewFriendRequestEventResponse(ctx context.Context, in *NewFriendRequestEventResponse, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/SendNewFriendRequestEventResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) SendMemberJoinRequestEventResponse(ctx context.Context, in *MemberJoinRequestEventResponse, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/SendMemberJoinRequestEventResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraiAgentClient) SendBotInvitedJoinGroupRequestEventResponse(ctx context.Context, in *BotInvitedJoinGroupRequestEventResponse, opts ...grpc.CallOption) (*UniversalResponseResult, error) {
	out := new(UniversalResponseResult)
	err := c.cc.Invoke(ctx, "/mirai.MiraiAgent/SendBotInvitedJoinGroupRequestEventResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiraiAgentServer is the server API for MiraiAgent service.
// All implementations must embed UnimplementedMiraiAgentServer
// for forward compatibility
type MiraiAgentServer interface {
	Subscribe(*InitParam, MiraiAgent_SubscribeServer) error
	About(context.Context, *SelfParam) (*AboutResult, error)
	GetMessageFromId(context.Context, *GetMessageParam) (*GetMessageResult, error)
	ListFriend(context.Context, *SelfParam) (*ListFriendResult, error)
	ListGroup(context.Context, *SelfParam) (*ListGroupResult, error)
	ListMember(context.Context, *ListMemberParam) (*ListMemberResult, error)
	GetBotProfile(context.Context, *SelfParam) (*GetProfileResult, error)
	GetFriendProfile(context.Context, *GetFriendParam) (*GetProfileResult, error)
	GetMemberProfile(context.Context, *GetMemberParam) (*GetProfileResult, error)
	SendFriendMessage(context.Context, *SendFriendMessageParam) (*UniversalSendMessageResult, error)
	SendGroupMessage(context.Context, *SendGroupMessageParam) (*UniversalSendMessageResult, error)
	SendTempMessage(context.Context, *SendTempMessageParam) (*UniversalSendMessageResult, error)
	SendNudge(context.Context, *SendNudgeParam) (*UniversalResponseResult, error)
	Recall(context.Context, *RecallParam) (*UniversalResponseResult, error)
	ListFile(context.Context, *ListFileParam) (*ListFileResult, error)
	GetFileInfo(context.Context, *GetFileInfoParam) (*GetFileInfoResult, error)
	FileMkdir(context.Context, *FileMkdirParam) (*FileMkdirResult, error)
	FileDelete(context.Context, *FileDeleteParam) (*UniversalResponseResult, error)
	FileMove(context.Context, *FileMoveParam) (*UniversalResponseResult, error)
	FileRename(context.Context, *FileRenameParam) (*UniversalResponseResult, error)
	DeleteFriend(context.Context, *DeleteFriendParam) (*UniversalResponseResult, error)
	Mute(context.Context, *MuteParam) (*UniversalResponseResult, error)
	Unmute(context.Context, *UnmuteParam) (*UniversalResponseResult, error)
	Kick(context.Context, *KickParam) (*UniversalResponseResult, error)
	Quit(context.Context, *QuitParam) (*UniversalResponseResult, error)
	MuteAll(context.Context, *MuteAllParam) (*UniversalResponseResult, error)
	UnmuteAll(context.Context, *UnmuteAllParam) (*UniversalResponseResult, error)
	SetEssence(context.Context, *SetEssenceParam) (*UniversalResponseResult, error)
	GetGroupConfig(context.Context, *GetGroupConfigParam) (*GetGroupConfigResult, error)
	UpdateGroupConfig(context.Context, *UpdateGroupConfigParam) (*UniversalResponseResult, error)
	GetMemberInfo(context.Context, *GetMemberInfoParam) (*GetMemberInfoResult, error)
	UpdateMemberInfo(context.Context, *UpdateMemberInfoParam) (*UniversalResponseResult, error)
	SetMemberAdmin(context.Context, *SetMemberAdminParam) (*UniversalResponseResult, error)
	SendNewFriendRequestEventResponse(context.Context, *NewFriendRequestEventResponse) (*UniversalResponseResult, error)
	SendMemberJoinRequestEventResponse(context.Context, *MemberJoinRequestEventResponse) (*UniversalResponseResult, error)
	SendBotInvitedJoinGroupRequestEventResponse(context.Context, *BotInvitedJoinGroupRequestEventResponse) (*UniversalResponseResult, error)
	mustEmbedUnimplementedMiraiAgentServer()
}

// UnimplementedMiraiAgentServer must be embedded to have forward compatible implementations.
type UnimplementedMiraiAgentServer struct {
}

func (UnimplementedMiraiAgentServer) Subscribe(*InitParam, MiraiAgent_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMiraiAgentServer) About(context.Context, *SelfParam) (*AboutResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method About not implemented")
}
func (UnimplementedMiraiAgentServer) GetMessageFromId(context.Context, *GetMessageParam) (*GetMessageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageFromId not implemented")
}
func (UnimplementedMiraiAgentServer) ListFriend(context.Context, *SelfParam) (*ListFriendResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriend not implemented")
}
func (UnimplementedMiraiAgentServer) ListGroup(context.Context, *SelfParam) (*ListGroupResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (UnimplementedMiraiAgentServer) ListMember(context.Context, *ListMemberParam) (*ListMemberResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMember not implemented")
}
func (UnimplementedMiraiAgentServer) GetBotProfile(context.Context, *SelfParam) (*GetProfileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotProfile not implemented")
}
func (UnimplementedMiraiAgentServer) GetFriendProfile(context.Context, *GetFriendParam) (*GetProfileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendProfile not implemented")
}
func (UnimplementedMiraiAgentServer) GetMemberProfile(context.Context, *GetMemberParam) (*GetProfileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberProfile not implemented")
}
func (UnimplementedMiraiAgentServer) SendFriendMessage(context.Context, *SendFriendMessageParam) (*UniversalSendMessageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendMessage not implemented")
}
func (UnimplementedMiraiAgentServer) SendGroupMessage(context.Context, *SendGroupMessageParam) (*UniversalSendMessageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMessage not implemented")
}
func (UnimplementedMiraiAgentServer) SendTempMessage(context.Context, *SendTempMessageParam) (*UniversalSendMessageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTempMessage not implemented")
}
func (UnimplementedMiraiAgentServer) SendNudge(context.Context, *SendNudgeParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNudge not implemented")
}
func (UnimplementedMiraiAgentServer) Recall(context.Context, *RecallParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recall not implemented")
}
func (UnimplementedMiraiAgentServer) ListFile(context.Context, *ListFileParam) (*ListFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFile not implemented")
}
func (UnimplementedMiraiAgentServer) GetFileInfo(context.Context, *GetFileInfoParam) (*GetFileInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedMiraiAgentServer) FileMkdir(context.Context, *FileMkdirParam) (*FileMkdirResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileMkdir not implemented")
}
func (UnimplementedMiraiAgentServer) FileDelete(context.Context, *FileDeleteParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDelete not implemented")
}
func (UnimplementedMiraiAgentServer) FileMove(context.Context, *FileMoveParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileMove not implemented")
}
func (UnimplementedMiraiAgentServer) FileRename(context.Context, *FileRenameParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileRename not implemented")
}
func (UnimplementedMiraiAgentServer) DeleteFriend(context.Context, *DeleteFriendParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedMiraiAgentServer) Mute(context.Context, *MuteParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mute not implemented")
}
func (UnimplementedMiraiAgentServer) Unmute(context.Context, *UnmuteParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmute not implemented")
}
func (UnimplementedMiraiAgentServer) Kick(context.Context, *KickParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}
func (UnimplementedMiraiAgentServer) Quit(context.Context, *QuitParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (UnimplementedMiraiAgentServer) MuteAll(context.Context, *MuteAllParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteAll not implemented")
}
func (UnimplementedMiraiAgentServer) UnmuteAll(context.Context, *UnmuteAllParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmuteAll not implemented")
}
func (UnimplementedMiraiAgentServer) SetEssence(context.Context, *SetEssenceParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEssence not implemented")
}
func (UnimplementedMiraiAgentServer) GetGroupConfig(context.Context, *GetGroupConfigParam) (*GetGroupConfigResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupConfig not implemented")
}
func (UnimplementedMiraiAgentServer) UpdateGroupConfig(context.Context, *UpdateGroupConfigParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupConfig not implemented")
}
func (UnimplementedMiraiAgentServer) GetMemberInfo(context.Context, *GetMemberInfoParam) (*GetMemberInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberInfo not implemented")
}
func (UnimplementedMiraiAgentServer) UpdateMemberInfo(context.Context, *UpdateMemberInfoParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberInfo not implemented")
}
func (UnimplementedMiraiAgentServer) SetMemberAdmin(context.Context, *SetMemberAdminParam) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMemberAdmin not implemented")
}
func (UnimplementedMiraiAgentServer) SendNewFriendRequestEventResponse(context.Context, *NewFriendRequestEventResponse) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNewFriendRequestEventResponse not implemented")
}
func (UnimplementedMiraiAgentServer) SendMemberJoinRequestEventResponse(context.Context, *MemberJoinRequestEventResponse) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMemberJoinRequestEventResponse not implemented")
}
func (UnimplementedMiraiAgentServer) SendBotInvitedJoinGroupRequestEventResponse(context.Context, *BotInvitedJoinGroupRequestEventResponse) (*UniversalResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBotInvitedJoinGroupRequestEventResponse not implemented")
}
func (UnimplementedMiraiAgentServer) mustEmbedUnimplementedMiraiAgentServer() {}

// UnsafeMiraiAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiraiAgentServer will
// result in compilation errors.
type UnsafeMiraiAgentServer interface {
	mustEmbedUnimplementedMiraiAgentServer()
}

func RegisterMiraiAgentServer(s grpc.ServiceRegistrar, srv MiraiAgentServer) {
	s.RegisterService(&MiraiAgent_ServiceDesc, srv)
}

func _MiraiAgent_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MiraiAgentServer).Subscribe(m, &miraiAgentSubscribeServer{stream})
}

type MiraiAgent_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type miraiAgentSubscribeServer struct {
	grpc.ServerStream
}

func (x *miraiAgentSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _MiraiAgent_About_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).About(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/About",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).About(ctx, req.(*SelfParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_GetMessageFromId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).GetMessageFromId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/GetMessageFromId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).GetMessageFromId(ctx, req.(*GetMessageParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_ListFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).ListFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/ListFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).ListFriend(ctx, req.(*SelfParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/ListGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).ListGroup(ctx, req.(*SelfParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_ListMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMemberParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).ListMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/ListMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).ListMember(ctx, req.(*ListMemberParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_GetBotProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).GetBotProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/GetBotProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).GetBotProfile(ctx, req.(*SelfParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_GetFriendProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).GetFriendProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/GetFriendProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).GetFriendProfile(ctx, req.(*GetFriendParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_GetMemberProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).GetMemberProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/GetMemberProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).GetMemberProfile(ctx, req.(*GetMemberParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_SendFriendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendMessageParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).SendFriendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/SendFriendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).SendFriendMessage(ctx, req.(*SendFriendMessageParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_SendGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMessageParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).SendGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/SendGroupMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).SendGroupMessage(ctx, req.(*SendGroupMessageParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_SendTempMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTempMessageParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).SendTempMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/SendTempMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).SendTempMessage(ctx, req.(*SendTempMessageParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_SendNudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNudgeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).SendNudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/SendNudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).SendNudge(ctx, req.(*SendNudgeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_Recall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecallParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).Recall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/Recall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).Recall(ctx, req.(*RecallParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_ListFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).ListFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/ListFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).ListFile(ctx, req.(*ListFileParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/GetFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).GetFileInfo(ctx, req.(*GetFileInfoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_FileMkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMkdirParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).FileMkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/FileMkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).FileMkdir(ctx, req.(*FileMkdirParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_FileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDeleteParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).FileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/FileDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).FileDelete(ctx, req.(*FileDeleteParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_FileMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMoveParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).FileMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/FileMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).FileMove(ctx, req.(*FileMoveParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_FileRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRenameParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).FileRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/FileRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).FileRename(ctx, req.(*FileRenameParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).DeleteFriend(ctx, req.(*DeleteFriendParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_Mute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).Mute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/Mute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).Mute(ctx, req.(*MuteParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_Unmute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmuteParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).Unmute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/Unmute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).Unmute(ctx, req.(*UnmuteParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).Kick(ctx, req.(*KickParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).Quit(ctx, req.(*QuitParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_MuteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteAllParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).MuteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/MuteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).MuteAll(ctx, req.(*MuteAllParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_UnmuteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmuteAllParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).UnmuteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/UnmuteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).UnmuteAll(ctx, req.(*UnmuteAllParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_SetEssence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEssenceParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).SetEssence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/SetEssence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).SetEssence(ctx, req.(*SetEssenceParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_GetGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupConfigParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).GetGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/GetGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).GetGroupConfig(ctx, req.(*GetGroupConfigParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_UpdateGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupConfigParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).UpdateGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/UpdateGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).UpdateGroupConfig(ctx, req.(*UpdateGroupConfigParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_GetMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberInfoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).GetMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/GetMemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).GetMemberInfo(ctx, req.(*GetMemberInfoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_UpdateMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberInfoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).UpdateMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/UpdateMemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).UpdateMemberInfo(ctx, req.(*UpdateMemberInfoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_SetMemberAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMemberAdminParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).SetMemberAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/SetMemberAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).SetMemberAdmin(ctx, req.(*SetMemberAdminParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_SendNewFriendRequestEventResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFriendRequestEventResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).SendNewFriendRequestEventResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/SendNewFriendRequestEventResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).SendNewFriendRequestEventResponse(ctx, req.(*NewFriendRequestEventResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_SendMemberJoinRequestEventResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberJoinRequestEventResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).SendMemberJoinRequestEventResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/SendMemberJoinRequestEventResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).SendMemberJoinRequestEventResponse(ctx, req.(*MemberJoinRequestEventResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraiAgent_SendBotInvitedJoinGroupRequestEventResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotInvitedJoinGroupRequestEventResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraiAgentServer).SendBotInvitedJoinGroupRequestEventResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirai.MiraiAgent/SendBotInvitedJoinGroupRequestEventResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraiAgentServer).SendBotInvitedJoinGroupRequestEventResponse(ctx, req.(*BotInvitedJoinGroupRequestEventResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// MiraiAgent_ServiceDesc is the grpc.ServiceDesc for MiraiAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiraiAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mirai.MiraiAgent",
	HandlerType: (*MiraiAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "About",
			Handler:    _MiraiAgent_About_Handler,
		},
		{
			MethodName: "GetMessageFromId",
			Handler:    _MiraiAgent_GetMessageFromId_Handler,
		},
		{
			MethodName: "ListFriend",
			Handler:    _MiraiAgent_ListFriend_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _MiraiAgent_ListGroup_Handler,
		},
		{
			MethodName: "ListMember",
			Handler:    _MiraiAgent_ListMember_Handler,
		},
		{
			MethodName: "GetBotProfile",
			Handler:    _MiraiAgent_GetBotProfile_Handler,
		},
		{
			MethodName: "GetFriendProfile",
			Handler:    _MiraiAgent_GetFriendProfile_Handler,
		},
		{
			MethodName: "GetMemberProfile",
			Handler:    _MiraiAgent_GetMemberProfile_Handler,
		},
		{
			MethodName: "SendFriendMessage",
			Handler:    _MiraiAgent_SendFriendMessage_Handler,
		},
		{
			MethodName: "SendGroupMessage",
			Handler:    _MiraiAgent_SendGroupMessage_Handler,
		},
		{
			MethodName: "SendTempMessage",
			Handler:    _MiraiAgent_SendTempMessage_Handler,
		},
		{
			MethodName: "SendNudge",
			Handler:    _MiraiAgent_SendNudge_Handler,
		},
		{
			MethodName: "Recall",
			Handler:    _MiraiAgent_Recall_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _MiraiAgent_ListFile_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _MiraiAgent_GetFileInfo_Handler,
		},
		{
			MethodName: "FileMkdir",
			Handler:    _MiraiAgent_FileMkdir_Handler,
		},
		{
			MethodName: "FileDelete",
			Handler:    _MiraiAgent_FileDelete_Handler,
		},
		{
			MethodName: "FileMove",
			Handler:    _MiraiAgent_FileMove_Handler,
		},
		{
			MethodName: "FileRename",
			Handler:    _MiraiAgent_FileRename_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _MiraiAgent_DeleteFriend_Handler,
		},
		{
			MethodName: "Mute",
			Handler:    _MiraiAgent_Mute_Handler,
		},
		{
			MethodName: "Unmute",
			Handler:    _MiraiAgent_Unmute_Handler,
		},
		{
			MethodName: "Kick",
			Handler:    _MiraiAgent_Kick_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _MiraiAgent_Quit_Handler,
		},
		{
			MethodName: "MuteAll",
			Handler:    _MiraiAgent_MuteAll_Handler,
		},
		{
			MethodName: "UnmuteAll",
			Handler:    _MiraiAgent_UnmuteAll_Handler,
		},
		{
			MethodName: "SetEssence",
			Handler:    _MiraiAgent_SetEssence_Handler,
		},
		{
			MethodName: "GetGroupConfig",
			Handler:    _MiraiAgent_GetGroupConfig_Handler,
		},
		{
			MethodName: "UpdateGroupConfig",
			Handler:    _MiraiAgent_UpdateGroupConfig_Handler,
		},
		{
			MethodName: "GetMemberInfo",
			Handler:    _MiraiAgent_GetMemberInfo_Handler,
		},
		{
			MethodName: "UpdateMemberInfo",
			Handler:    _MiraiAgent_UpdateMemberInfo_Handler,
		},
		{
			MethodName: "SetMemberAdmin",
			Handler:    _MiraiAgent_SetMemberAdmin_Handler,
		},
		{
			MethodName: "SendNewFriendRequestEventResponse",
			Handler:    _MiraiAgent_SendNewFriendRequestEventResponse_Handler,
		},
		{
			MethodName: "SendMemberJoinRequestEventResponse",
			Handler:    _MiraiAgent_SendMemberJoinRequestEventResponse_Handler,
		},
		{
			MethodName: "SendBotInvitedJoinGroupRequestEventResponse",
			Handler:    _MiraiAgent_SendBotInvitedJoinGroupRequestEventResponse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MiraiAgent_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mirai.proto",
}
